#!/usr/bin/env python3
# -*- encoding: utf8 -*-
# Author: pidpawel <pidpawel.eu>
# Author: aysorth
# Webpage: https://github.com/pidpawel/dnsreport/
# License: http://creativecommons.org/licenses/by-sa/3.0/

import argparse
import re
from dns import resolver
from dns import reversename

parser = argparse.ArgumentParser(description='Query DNS for extra data')
parser.add_argument('--no-color', dest='color', action='store_false', help='Prevent from using colors')
parser.add_argument('target', nargs='+', help='Targets to scan')

args = parser.parse_args()

if args.color:
    RED = '\033[31m'
    GREEN = '\033[32m'
    BLUE = '\033[34m'
    YELLOW = '\033[33m'
    ENDC = '\033[0m'
else:
    RED = ''
    GREEN = ''
    BLUE = ''
    YELLOW = ''
    ENDC = ''

# This lib does not allow ANY requests, so…
standard_record_types = (
    'SOA', 'A', 'AAAA', 'MX', 'SRV', 'TXT', 'DNAME', 'NS', 'SPF', 'PTR', 'RP', 'CNAME'
#'AFSDB', 'APL', 'CERT', 'DHCID', 'DLV', 'DNAME', 'DNSKEY', 'DS', 'HIP',
#'IPSECKEY', 'KEY', 'KX', 'LOC', 'NAPTR', 'NSEC', 'NSEC3', 'NSEC3PARAM',
#'PRSIG', 'SIG', 'SSHFP', 'TA', 'TLSA', 'TSIG', 'AXFR', 'IXFR', 'OPT'
)

def makereport(domain):
    print(RED + domain + ENDC)
    for t in standard_record_types:
        root_last = (t == standard_record_types[-1])

        try:
            answer = resolver.query(domain, t)
        except:
            if root_last:
                print('╰─ ' + YELLOW + t + ENDC)
            else:
                print('├─ ' + YELLOW + t + ENDC)
        else:
            if root_last:
                print('╰─ ' + GREEN + t + ENDC)
            else:
                print('├─ ' + GREEN + t + ENDC)
            for index, line in enumerate(answer):
                line_s = str(line)
                line_last = (index == len(answer) - 1)

                rl = ' ' if root_last else '│'
                ll = ' ' if line_last else '│'
                llt = '╰' if line_last else '├'

                print(rl + '  ' + llt + '─' + BLUE + line_s + ENDC)

                if t in ('A', 'AAAA'):
                    try:
                        rev = revdns(line_s, True)
                    except:
                        pass
                    else:
                        if rev == domain:
                            print('├─────┴ ' + RED + rev + ENDC)
                        else:
                            print(rl + '  ' + ll + ' ╰─' + RED + rev + ENDC)


def revdns(ip, inmakereport = False):
    try:
        inaddr = reversename.from_address(ip)
        rev = str(resolver.query(inaddr, 'PTR')[0])
        if(inmakereport != True):
            print(RED + ip + ENDC)
            print('╰─ ' + GREEN + rev + ENDC)
        else:
            return rev;
    except:
        print("RevDNS for " + RED + ip + ENDC + " could not be found.")


def isTargetIp(target):
    ipv4pattern = "((2[0-5]{2}|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(2[0-5]{2}|2[0-4]\d|1\d{2}|[1-9]\d|\d)(/(3[012]|[12]\d|\d))?"
    v4 = re.compile(ipv4pattern)
    if(v4.match(target)):
        return True

    ipv6pattern = "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$"
    v6 = re.compile(ipv6pattern)
    if(v6.match(target) != None):
        return True
    return False


def isTargetDomain(target):
    domainpattern = "^[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}$"
    dom = re.compile(domainpattern)
    if(dom.match(target)):
        return True
    return False;

for t in args.target:
        if(isTargetIp(t)):
            revdns(t)
        elif(isTargetDomain(t)):
            makereport(t)
        else:
            parser.print_help()
            print("\nTarget has to be either a valid IP address or a domain.")

